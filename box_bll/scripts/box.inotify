#!/system/bin/sh

export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/data/data/com.termux/files/usr/bin"

EVENT=$1
MONITOR_DIR=$2
MONITOR_FILE=$3

SCRIPTS=$(realpath $0)
SCRIPTS_DIR=$(dirname ${SCRIPTS})

source ${SCRIPTS_DIR}/box.config

SERVICE_PATH="${SCRIPTS_DIR}/box.service"
TPROXY_PATH="${SCRIPTS_DIR}/box.tproxy"
INOTIFY_SCRIPT="/data/adb/box_bll/scripts/box.inotify"
HOSTS_PATH="/data/adb/box_bll/clash/etc/"
HOSTS_FILE="/data/adb/box_bll/clash/etc/hosts"
SYSTEM_HOSTS="/system/etc/hosts"
TMP_PID_DIR="/data/adb/modules/Surfing"
mkdir -p "${run_path}"
mkdir -p "$TMP_PID_DIR"

service_control() {
  if [ ! -f "${box_path}/manual" ]; then
    if [ "${MONITOR_FILE}" = "disable" ]; then
      if [ "${EVENT}" = "d" ]; then
        ${SERVICE_PATH} start >> "${run_path}/run.log" 2>> "${run_path}/run_error.log"
        ${TPROXY_PATH} enable >> "${run_path}/run.log" 2>> "${run_path}/run_error.log"
        for task in upgrade linkclear; do
            pid_file="${TMP_PID_DIR}/${task}.pid"
            if [ ! -f "$pid_file" ] || ! kill -0 "$(cat "$pid_file")" 2>/dev/null; then
                "${SCRIPTS_DIR}/box.${task}" >> "${run_path}/run_error.log" 2>&1 &
            fi
        done
      elif [ "${EVENT}" = "n" ]; then
        ${TPROXY_PATH} disable >> "${run_path}/run.log" 2>> "${run_path}/run_error.log"
        ${SERVICE_PATH} stop >> "${run_path}/run.log" 2>> "${run_path}/run_error.log"
        for pid_file in upgrade linkclear ; do
          pid_path="${TMP_PID_DIR}/${pid_file}.pid"
          if [ -f "$pid_path" ]; then
            pid=$(cat "$pid_path")
            if kill -0 "$pid" 2>/dev/null; then
              kill -TERM "$pid" 2>/dev/null
              sleep 1
              if kill -0 "$pid" 2>/dev/null; then
                kill -9 "$pid" 2>/dev/null
              fi
            fi
            rm -f "$pid_path"
          fi
        done
      fi
    fi
  fi
}
service_control

handle_hosts_event() {
    if [ "$MONITOR_FILE" = "hosts" ]; then
        case "$EVENT" in
            m|c|d)
                sleep 1
                umount "$SYSTEM_HOSTS" 2>/dev/null
                mount -o bind "$HOSTS_FILE" "$SYSTEM_HOSTS"
                ;;
            *)
                ;;
        esac
    fi
}
handle_hosts_event

handle_inotify_event() {
    if [ ! -d "$HOSTS_PATH" ]; then
        mkdir -p "$HOSTS_PATH"
        while pgrep -f "inotifyd $INOTIFY_SCRIPT $HOSTS_PATH" > /dev/null; do
            pkill -9 -f "inotifyd $INOTIFY_SCRIPT $HOSTS_PATH"
            sleep 1
        done
        inotifyd "$INOTIFY_SCRIPT" "$HOSTS_PATH" >/dev/null 2>&1 &
    fi
}
handle_inotify_event