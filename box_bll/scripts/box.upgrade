#!/system/bin/sh
export PATH="/system/bin:/system/xbin:/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH"

SCRIPTS_DIR=$(dirname "$(realpath "$0")")
LOG_DIR="/data/adb/modules/Surfing"
LOG_FILE="/data/adb/box_bll/run/auto_update.log"
PID_FILE="${LOG_DIR}/upgrade.pid"
CONFIG_FILE="/data/adb/box_bll/scripts/box.config"

API_URL="https://api.github.com/repos/vernesong/mihomo/releases?per_page=1"
CLASH_API="http://127.0.0.1:9090/upgrade"

mkdir -p "$LOG_DIR"
echo $$ > "$PID_FILE"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S %Z')] $*" >> "$LOG_FILE"
}

cleanup() {
    [ -f "$PID_FILE" ] && rm -f "$PID_FILE"
    exit 0
}
trap cleanup TERM INT EXIT

AUTO_UPDATE="true"
UPDATE_INTERVAL_RAW="3600"

if [ -f "${CONFIG_FILE}" ]; then
    source "${CONFIG_FILE}"
fi

AUTO_UPDATE=$(echo "$auto_update" | tr -d '"')
UPDATE_INTERVAL_RAW=$(echo "$update_interval" | tr -d '"')

ENV_FILE="/data/adb/box_bll/clash/config.env"
if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"
fi
[ -n "$GITHUB_TOKEN" ] && AUTH_HEADER="Authorization: token $GITHUB_TOKEN"

parse_interval() {
    raw=$(echo "$1" | tr -d '[:space:]')
    [ -z "$raw" ] && echo 3600 && return
    unit=${raw: -1}
    value=${raw%[smhdSMHD]}
    case "$unit" in
        s|S) echo "$value" ;;
        m|M) echo $((value * 60)) ;;
        h|H) echo $((value * 3600)) ;;
        d|D) echo $((value * 86400)) ;;
        *) echo "$raw" ;;
    esac
}

UPDATE_INTERVAL=$(parse_interval "$UPDATE_INTERVAL_RAW")
[ "$AUTO_UPDATE" = "false" ] && { cleanup; }

if ! command -v curl >/dev/null 2>&1 && command -v wget >/dev/null 2>&1; then
    curl() { wget -q -O - "$@"; }
fi

check_update() {
    release_json=$(curl -s -H "$AUTH_HEADER" "$API_URL")

    if [ -z "$release_json" ]; then
        log "GitHub API not responding or rate-limited, please check network or configure GITHUB_TOKEN"
        return
    fi

    if echo "$release_json" | grep -qi "API rate limit exceeded"; then
        log "GitHub API access has been rate-limited, please use GITHUB_TOKEN to increase access limit"
        return
    fi

    raw_tag=$(echo "$release_json" | grep '"tag_name":' | head -n1 | sed -E 's/.*"([^"]+)".*/\1/' | tr -d '\r\n')
    [ -z "$raw_tag" ] && { log "Failed to get tag_name from GitHub"; return; }

    ref_json=$(curl -s -H "$AUTH_HEADER" "https://api.github.com/repos/vernesong/mihomo/git/ref/tags/$raw_tag")
    latest_commit=$(echo "$ref_json" | grep '"sha":' | head -n1 | sed -E 's/.*"([^"]+)".*/\1/' | tr -d '\r\n')
    latest_commit=${latest_commit:0:7}

    display_tag=${raw_tag#Prerelease-}
    display_tag=$(echo "$display_tag" | tr '[:upper:]' '[:lower:]')

    latest_ver="${display_tag}-${latest_commit}"

    current_ver_full=$(curl -s http://127.0.0.1:9090/version | sed -n 's/.*"version":"\([^"]*\)".*/\1/p')
    current_prefix=$(echo "$current_ver_full" | sed -E 's/-smart(-[0-9a-f]{7})?$//' | tr '[:upper:]' '[:lower:]')
    current_commit=$(echo "$current_ver_full" | grep -o '[0-9a-f]\{7\}$')

    if [ "$latest_commit" != "$current_commit" ]; then
        log "New version detected"
        log "Latest version: ${latest_ver}"
        log "Current version: ${current_prefix}-${current_commit:-none}"

        res=$(curl -s -X POST "$CLASH_API" \
             -H "Content-Type: application/json" \
             -d '{"type": "mihomo"}')

        log "Status: $(echo "$res" | sed 's/[{}"]//g')"
        log "This request completed"
    fi
}

sleep 3
check_update

while true; do
    check_update
    START_TIME=$(date +%s)
    while true; do
        sleep 5
        [ ! -f "$PID_FILE" ] && { cleanup; }
        NOW=$(date +%s)
        ELAPSED=$((NOW - START_TIME))
        [ $ELAPSED -ge $UPDATE_INTERVAL ] && break
    done
done